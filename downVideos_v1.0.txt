import tkinter as tk
import shutil
from tkinter import ttk, messagebox, filedialog
from PIL import Image, ImageTk
from pathlib import Path
import threading
import yt_dlp
import logging
import webbrowser
import os
import re
import sys
import winreg

# Função para obter o caminho absoluto do recurso
def resource_path(relative_path):
    """ Retorna o caminho absoluto para o recurso, funciona para desenvolvimento e para PyInstaller """
    try:
        # PyInstaller cria uma pasta temporária e armazena o caminho em _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

# Configuração do sistema de logs
logging.basicConfig(
    filename='youtube_downloader.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8',
)

# Variáveis globais
link = None
diretorio_destino = "C:\\downVideos"  # Diretório padrão
titulo_video = None
formato_selecionado = "MP4"

# Caminho para a imagem da logo
LOGO_PATH = resource_path("downVideos.png")

# Função para limpar nomes de arquivos
def limpar_nome_arquivo(nome):
    # Remove caracteres inválidos para nomes de arquivos no Windows
    nome = re.sub(r'[<>:"/\\|?*#]', '', nome)  # Remove caracteres especiais
    nome = nome.strip()  # Remove espaços no início e no final
    nome = nome.replace('\n', ' ')  # Substitui quebras de linha por espaços
    return nome

# Função para adicionar o caminho do FFmpeg ao PATH do sistema
def adicionar_ffmpeg_ao_path():
    novo_caminho = r"C:\downVideos\ffmpeg\bin"
    if novo_caminho not in os.environ["PATH"]:
        os.environ["PATH"] += os.pathsep + novo_caminho
        if sys.platform == "win32":
            try:
                with winreg.ConnectRegistry(None, winreg.HKEY_CURRENT_USER) as hkey:
                    with winreg.OpenKey(hkey, "Environment", 0, winreg.KEY_ALL_ACCESS) as sub_key:
                        path_value, _ = winreg.QueryValueEx(sub_key, "PATH")
                        if novo_caminho not in path_value:
                            novo_path_value = path_value + os.pathsep + novo_caminho
                            winreg.SetValueEx(sub_key, "PATH", 0, winreg.REG_EXPAND_SZ, novo_path_value)
                            logging.info(f"Caminho {novo_caminho} adicionado ao PATH do usuário.")
                            messagebox.showinfo("Sucesso", f"Caminho {novo_caminho} adicionado ao PATH. Reinicie o Windows para aplicar as alterações.")
            except Exception as e:
                logging.error(f"Erro ao adicionar o caminho ao PATH: {e}")
                messagebox.showerror("Erro", f"Erro ao adicionar o caminho ao PATH: {e}")
        else:
            logging.warning("Este script só funciona no Windows.")
            messagebox.showwarning("Aviso", "Este script só funciona no Windows.")

# Função para escolher o diretório de destino
def escolher_diretorio():
    global diretorio_destino
    novo_diretorio = filedialog.askdirectory(title="Escolha onde salvar o vídeo")
    if novo_diretorio:
        diretorio_destino = novo_diretorio
        label_status.config(text=f"Diretório selecionado: {diretorio_destino}")
    else:
        label_status.config(text=f"Diretório padrão: {diretorio_destino}")

# Função para verificar a plataforma do link
def verificar_plataforma(link):
    if "youtube.com" in link or "youtu.be" in link:
        return "YouTube"
    elif "instagram.com" in link:
        return "Instagram"
    elif "facebook.com" in link or "fb.watch" in link:
        return "Facebook"
    else:
        return None

# Função para baixar vídeo
def baixar_video(plataforma):
    global link, diretorio_destino, titulo_video, formato_selecionado

    link = entry_link.get()
    if not link:
        messagebox.showerror("Erro", "Por favor, insira um link.")
        logging.warning("Nenhum link fornecido pelo usuário.")
        return

    if not diretorio_destino:
        messagebox.showerror("Erro", "Por favor, selecione um diretório de destino.")
        logging.warning("Nenhum diretório de destino selecionado.")
        return

    plataforma_link = verificar_plataforma(link)
    if plataforma_link != plataforma:
        messagebox.showerror("Erro", f"O link fornecido não é da plataforma {plataforma}. Por favor, use o botão correto.")
        logging.warning(f"Link divergente da plataforma selecionada: {plataforma_link} != {plataforma}")
        return

    try:
        logging.info(f"Iniciando download do vídeo: {link}")
        ydl_opts = {
            'progress_hooks': [atualizar_progresso],
            'outtmpl': f'{diretorio_destino}/%(title)s.%(ext)s',  # Define o nome do arquivo
        }

        # Configurações específicas para MP3
        if formato_selecionado == "MP3":
            ydl_opts['format'] = 'bestaudio/best'  # Baixa o melhor áudio disponível
            ydl_opts['postprocessors'] = [{
                'key': 'FFmpegExtractAudio',  # Extrai o áudio
                'preferredcodec': 'mp3',      # Converte para MP3
                'preferredquality': '192',    # Qualidade do áudio
            }]
        else:
            ydl_opts['format'] = 'best'  # Baixa o melhor formato de vídeo (MP4)

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(link, download=False)
            titulo_video = info.get('title', 'Vídeo sem título')
            titulo_video = limpar_nome_arquivo(titulo_video)  # Limpa o título do vídeo

        label_status.config(text=f"Baixando: {titulo_video}...")
        threading.Thread(target=executar_download, args=(link, ydl_opts)).start()

    except Exception as e:
        logging.error(f"Erro ao configurar o download: {e}")
        messagebox.showerror("Erro", f"Ocorreu um erro: {e}")

# Função para executar o download com yt-dlp
def executar_download(link, ydl_opts):
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([link])
        janela.after(0, download_concluido)
    except Exception as ex:
        logging.error(f"Erro durante o download: {ex}")
        janela.after(0, lambda ex=ex: messagebox.showerror("Erro", f"Erro durante o download: {ex}"))

# Função para atualizar a barra de progresso
def atualizar_progresso(d):
    if d['status'] == 'downloading':
        if '_percent_str' in d:
            progresso = float(d['_percent_str'].replace('%', ''))
        elif 'downloaded_bytes' in d and 'total_bytes' in d:
            progresso = (d['downloaded_bytes'] / d['total_bytes']) * 100
        else:
            progresso = 0

        barra_progresso["value"] = progresso
        janela.update_idletasks()
        logging.info(f"Progresso do download: {progresso}%")

# Função chamada quando o download é concluído
def download_concluido():
    global link, titulo_video

    logging.info("Download concluído com sucesso!")
    messagebox.showinfo("Sucesso", "Download concluído!")
    label_status.config(text=f"Download concluído: {titulo_video}")
    barra_progresso["value"] = 100

    entry_link.delete(0, tk.END)
    label_status.config(text="Pronto para novo download.")
    titulo_video = None

    botao_abrir_diretorio.config(state=tk.NORMAL)

# Função para abrir o diretório onde o vídeo foi salvo
def abrir_diretorio():
    if diretorio_destino:
        webbrowser.open(diretorio_destino)
    else:
        messagebox.showwarning("Aviso", "Nenhum diretório selecionado.")

# Função para selecionar o formato de saída
def selecionar_formato(event):
    global formato_selecionado
    formato_selecionado = combo_formatos.get()
    logging.info(f"Formato selecionado: {formato_selecionado}")

# Configuração da interface gráfica
janela = tk.Tk()
janela.title("downVideos v1.2")
janela.geometry("500x550")

# Centraliza a janela na tela
largura_janela = 500
altura_janela = 550
largura_tela = janela.winfo_screenwidth()
altura_tela = janela.winfo_screenheight()
x = (largura_tela // 2) - (largura_janela // 2)
y = (altura_tela // 2) - (altura_janela // 2)
janela.geometry(f'{largura_janela}x{altura_janela}+{x}+{y}')

# Define o ícone da janela
try:
    janela.iconbitmap(resource_path("downVideos.ico"))
except Exception as e:
    logging.warning(f"Não foi possível carregar o ícone: {e}")

# Carrega a imagem downVideos.png e redimensiona para 80x80
try:
    imagem = Image.open(resource_path("downVideos.png"))
    print("Imagem carregada com sucesso!")
    imagem = imagem.resize((80, 80), Image.Resampling.LANCZOS)
    imagem_tk = ImageTk.PhotoImage(imagem)
    print("Imagem convertida para Tkinter!")
except Exception as e:
    logging.error(f"Erro ao carregar a imagem: {e}")
    print(f"Erro ao carregar a imagem: {e}")
    imagem_tk = None

# Cria o diretório padrão, se não existir
if not os.path.exists(diretorio_destino):
    os.makedirs(diretorio_destino)

# Label e campo de entrada para o link
label_link = tk.Label(janela, text="Cole o link do vídeo:")
label_link.pack(pady=10)

entry_link = tk.Entry(janela, width=50)
entry_link.pack(pady=5)

# Botão para escolher o diretório de destino
botao_escolher_diretorio = tk.Button(janela, text="Escolher Diretório", command=escolher_diretorio)
botao_escolher_diretorio.pack(pady=10)

# Menu de seleção de formato
label_formato = tk.Label(janela, text="Escolha o formato de saída:")
label_formato.pack(pady=5)

formatos = ["MP4", "MP3"]
combo_formatos = ttk.Combobox(janela, values=formatos, state="readonly")
combo_formatos.set("MP4")
combo_formatos.pack(pady=5)
combo_formatos.bind("<<ComboboxSelected>>", selecionar_formato)

# Botões para baixar vídeos de diferentes plataformas
frame_botoes = tk.Frame(janela)
frame_botoes.pack(pady=10)

botao_youtube = tk.Button(frame_botoes, text="Baixar do YouTube", command=lambda: baixar_video("YouTube"))
botao_youtube.pack(side=tk.LEFT, padx=5)

botao_instagram = tk.Button(frame_botoes, text="Baixar do Instagram", command=lambda: baixar_video("Instagram"))
botao_instagram.pack(side=tk.LEFT, padx=5)

botao_facebook = tk.Button(frame_botoes, text="Baixar do Facebook", command=lambda: baixar_video("Facebook"))
botao_facebook.pack(side=tk.LEFT, padx=5)

# Barra de progresso
barra_progresso = ttk.Progressbar(janela, orient="horizontal", length=300, mode="determinate")
barra_progresso.pack(pady=10)

# Label para status do download
label_status = tk.Label(janela, text=f"Diretório padrão: {diretorio_destino}")
label_status.pack(pady=5)

# Botão para abrir o diretório
botao_abrir_diretorio = tk.Button(janela, text="Abrir Diretório", command=abrir_diretorio, state=tk.DISABLED)
botao_abrir_diretorio.pack(pady=10)

# Frame para a logo e os créditos
frame_logo_creditos = tk.Frame(janela)
frame_logo_creditos.pack(pady=10)

# Adiciona a logo ao frame
if imagem_tk:
    label_imagem = tk.Label(frame_logo_creditos, image=imagem_tk)
    label_imagem.image = imagem_tk
    label_imagem.pack(side=tk.TOP, pady=5)

# Adiciona os créditos ao frame
label_creditos = tk.Label(frame_logo_creditos, text="Criado por Paulo Simplicio© - downVideos v1.2", font=("Arial", 8))
label_creditos.pack(side=tk.TOP, pady=5)

# Adiciona o FFmpeg ao PATH do sistema
adicionar_ffmpeg_ao_path()

# Inicia a interface gráfica
janela.mainloop()